buildscript {
    ext.streamsets_api_version = '2.7.+'
    ext.streamsets_sdk_version = '2.7.+'
    ext.slf4j_version = '1.7.+'
    ext.junit_version = '4.+'
    ext.logback_version = '1.2.+'
    ext.jsonpath_version = '2.4.+'
    ext.jackson_version = '2.9.+'
    ext.version_jcommander = '1.72'
    ext.version_lombok_gradleplugin = '1.10'
    ext.version_lombok = '1.16.18'
    ext.version_jetbrainsannotations = '13.0'
    ext.version_aws_sdk = '1.11.226'
    ext.dependency_management_version = '0.6.0.RELEASE'
    ext.kotlin_version = '1.1.60'
    ext.sonarGradlePluginVersion = '2.6.1'

    repositories {
        jcenter()
        mavenLocal()
        // TODO: isn't this a bit dangerous, it will make a build succeed when sometimes shouldn't, also snapshot versions would be inconsistent
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        //    classpath "io.franzbecker:gradle-lombok:$version_lombok"
        // The dependency management plugin changes Gradle's handling of a pom's exclusions so that they behave as they do in Maven.
        // https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle
        classpath "io.spring.gradle:dependency-management-plugin:$dependency_management_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'ru.vyarus:gradle-pom-plugin:1.2.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarGradlePluginVersion"
        classpath "gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0"
    }
}

plugins {
    id "org.sonarqube" version "2.6.1"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'org.sonarqube'

allprojects {
    group 'com.ebsco.entarch'
    version '1.0.15-SNAPSHOT'
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'distribution'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'ru.vyarus.pom'

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        systemProperty "file.encoding", "utf-8"
//        testLogging {
//            exceptionFormat "full" // default is "short"
//            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
//        }
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        testCompile "junit:junit:$junit_version"

        compile group: 'org.jetbrains', name: 'annotations', version: version_jetbrainsannotations

        compileOnly "org.projectlombok:lombok:$version_lombok"
        apt "org.projectlombok:lombok:$version_lombok"
        testApt "org.projectlombok:lombok:$version_lombok"

    }

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j'
    }

    tasks.withType(Tar) {
        compression = Compression.GZIP
    }

    distributions {
        main {
            contents {
                into('lib') {
                    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                    from jar
                    from(project.configurations.runtime)
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact distTar {
                    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                }
            }
        }
    }

    ///////////
    // CHECKS
    ///////////

    ////////////
    // SonarQube
    // http://10.31.235.69:9000/projects/favorite
    // https://blog.sonarsource.com/what-makes-checkstyle-pmd-findbugs-and-macker-complementary/
    // TODO: Integrate SonarQube with Checkstyle, PMD, Spotbugs
    ////////////
    sonarqube {
        properties {
            //Sonar Server properties
            property 'sonar.host.url', 'http://10.31.235.69:9000'               // default: localhost:9000
            property 'sonar.projectName', "$rootProject.name"
            property 'sonar.projectKey', "$rootProject.group:$rootProject.name" // default: "$project.group:$project.name"
            property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
        }
    }

    ////////////
    // JaCoCo
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    // https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.plugins.JacocoPluginExtension.html
    // https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.plugins.JacocoTaskExtension.html
    ////////////
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.7.9"
    }
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
            html.destination file("$buildDir/reports/jacocoHtml")
        }
    }
    test.finalizedBy jacocoTestReport
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    //TODO: Should be increased till 80% (0.8)
                    minimum = 0.42
                }
            }
        }
    }
    jacocoTestReport.finalizedBy jacocoTestCoverageVerification

    //////////////
    // Checkstyle
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
    //////////////
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '7.6.1'
        //TODO: Should be disabled
        ignoreFailures = false
        sourceSets = [sourceSets.main] // test sources excluded
        configFile = new File(rootDir, "/config/checkstyle/google_checks.xml")
    }
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            //html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
        }
    }

    ////////////
    // PMD
    // https://docs.gradle.org/current/userguide/pmd_plugin.html
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
    // https://github.com/pmd/pmd/tree/master/pmd-java/src/main/resources/rulesets/java
    ////////////
    apply plugin: 'pmd'
    pmd {
        toolVersion = '5.8.1'
        //TODO: Should be disabled
        ignoreFailures = true
        sourceSets = [sourceSets.main] // test sources excluded
        //ruleSetFiles = files('path/to/ruleSet.xml')
        ruleSets = [
                'java-basic',
                'java-braces',
                'java-clone',
                'java-codesize',
                'java-comments',
                'java-controversial',
                'java-coupling',
                'java-design',
                'java-empty',
                'java-finalizers',
                'java-imports',
                'java-j2ee',
                'java-javabeans',
                'java-junit',
                'java-logging-jakarta-commons',
                'java-logging-java',
                'java-migrating',
                'java-naming',
                'java-optimizations',
                'java-strictexception',
                'java-strings',
                'java-sunsecure',
                'java-typeresolution',
                'java-unnecessary',
                'java-unusedcode'
        ]
    }
    tasks.withType(Pmd) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    ////////////
    // Spotbugs
    // http://spotbugs.readthedocs.io/en/latest/gradle.html
    ////////////
    apply plugin: "com.github.spotbugs"
    spotbugs {
        toolVersion = '3.1.0'
        //TODO: Should be disabled
        ignoreFailures = true
        sourceSets = [sourceSets.main]   // test sources excluded
        effort = "max"
        reportLevel = "high"
    }
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}
artifactory {
    contextUrl = 'https://eis.jfrog.io/eis'
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = System.getenv('ArtifactoryUser')
            password = System.getenv('ArtifactoryPassword')
        }
        defaults { publications('mavenJava') }
    }
}
